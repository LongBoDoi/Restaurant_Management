// <auto-generated />
using System;
using API.ML.BOBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250324081808_AddImageForMenuItem")]
    partial class AddImageForMenuItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("MySql:CharSet", "utf8mb4")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.Property<Guid>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ConversationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("ChatbotConversation");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversationDetail", b =>
                {
                    b.Property<Guid>("ConversationDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConversationID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConversationDetailID");

                    b.HasIndex("ConversationID");

                    b.ToTable("ChatbotConversationDetail");
                });

            modelBuilder.Entity("API.ML.BO.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Preferences")
                        .HasColumnType("longtext");

                    b.HasKey("CustomerID");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("API.ML.BO.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeID = new Guid("d0929aef-1a5b-44f6-962d-01f7f9bb2b2b"),
                            EmployeeCode = "admin",
                            EmployeeName = "Admin",
                            Role = 0
                        });
                });

            modelBuilder.Entity("API.ML.BO.InventoryItem", b =>
                {
                    b.Property<Guid>("InventoryItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("InventoryItemID");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.Property<Guid>("MenuItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid?>("MenuItemCategoryID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("OutOfStock")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MenuItemID");

                    b.HasIndex("MenuItemCategoryID");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("API.ML.BO.MenuItemCategory", b =>
                {
                    b.Property<Guid>("MenuItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MenuItemCategoryID");

                    b.ToTable("MenuItemCategory");

                    b.HasData(
                        new
                        {
                            MenuItemCategoryID = new Guid("aa5e2d3f-4deb-4434-9ef2-19f5e51f21ad"),
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Khai vị",
                            SortOrder = 0
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("758296ed-75e6-45c6-8a1e-b075524027af"),
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Món chính",
                            SortOrder = 1
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("87de53a6-68e2-46a3-b998-7df936dfa1c5"),
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Tráng miệng",
                            SortOrder = 2
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("78ef8d8c-a68e-40c9-99ce-5bb496faef2b"),
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Đồ uống",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecialRequest")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("API.ML.BO.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MenuItemID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("MenuItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("API.ML.BO.Reservation", b =>
                {
                    b.Property<Guid>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReservationInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("API.ML.BO.Setting", b =>
                {
                    b.Property<Guid>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SettingID");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("Setting");

                    b.HasData(
                        new
                        {
                            SettingID = new Guid("06005218-029d-4040-9332-62e2e5dcb597"),
                            DataType = 1,
                            SettingKey = "IntroImageUrl",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("0b10c89c-7b7c-4f98-8828-1d07dffd2f73"),
                            DataType = 1,
                            SettingKey = "RestaurantName",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("3f07e912-5330-405d-9679-1d17f9b2eff4"),
                            DataType = 1,
                            SettingKey = "RestaurantAddress",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("4e5050c5-1a3c-482f-8169-e902fcca464f"),
                            DataType = 1,
                            SettingKey = "RestaurantPhoneNumber",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("3ca30af9-1538-4339-91d5-cd90a8ef44e4"),
                            DataType = 1,
                            SettingKey = "SocialMediaUrls",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("69a4356b-1f0a-40d5-ab4d-a75a2f0e16fb"),
                            DataType = 1,
                            SettingKey = "OpeningTimes",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("401ef8c2-370c-470e-ad71-9924a85d18ff"),
                            DataType = 1,
                            SettingKey = "RestaurantSlogan",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("43e2553a-5a18-4258-8c14-1852564fb309"),
                            DataType = 3,
                            SettingKey = "DisplayMenuScreenForCustomer",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingID = new Guid("5ac03c72-3e46-4f70-9b5f-3160c9ee2327"),
                            DataType = 2,
                            SettingKey = "DisplayMenuScreenForCustomerType",
                            SettingValue = "0"
                        },
                        new
                        {
                            SettingID = new Guid("b9ea5327-bbda-4f44-ba55-ccf02ed1b7ff"),
                            DataType = 2,
                            SettingKey = "DisplayMenuScreenByItemsForCustomerType",
                            SettingValue = "0"
                        },
                        new
                        {
                            SettingID = new Guid("c5bfe361-32f5-4b12-ba50-fc877e88c1f9"),
                            DataType = 1,
                            SettingKey = "ListMenuScreenForCustomerImages",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("d69a097b-f337-4521-a302-d9ed9a876a5e"),
                            DataType = 1,
                            SettingKey = "ListMenuScreenForCustomerItems",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("f10e0c45-17d3-4715-802e-30a5b5abc14c"),
                            DataType = 3,
                            SettingKey = "DisplayBookingScreenForCustomer",
                            SettingValue = "true"
                        });
                });

            modelBuilder.Entity("API.ML.BO.UserLogin", b =>
                {
                    b.Property<Guid>("UserLoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EmployeeID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserLoginID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("UserLogin");

                    b.HasData(
                        new
                        {
                            UserLoginID = new Guid("8b59dd9f-72d8-4d01-a971-03bc98c2262f"),
                            EmployeeID = new Guid("d0929aef-1a5b-44f6-962d-01f7f9bb2b2b"),
                            Password = "123456",
                            Token = "",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("ChatbotConversations")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversationDetail", b =>
                {
                    b.HasOne("API.ML.BO.ChatbotConversation", "ChatbotConversation")
                        .WithMany("ChatbotConversationDetails")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatbotConversation");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.HasOne("API.ML.BO.MenuItemCategory", "MenuItemCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuItemCategoryID");

                    b.Navigation("MenuItemCategory");
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.OrderDetail", b =>
                {
                    b.HasOne("API.ML.BO.MenuItem", "MenuItem")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.ML.BO.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.ML.BO.Reservation", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.UserLogin", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithOne("UserLogin")
                        .HasForeignKey("API.ML.BO.UserLogin", "CustomerID");

                    b.HasOne("API.ML.BO.Employee", "Employee")
                        .WithOne("UserLogin")
                        .HasForeignKey("API.ML.BO.UserLogin", "EmployeeID");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.Navigation("ChatbotConversationDetails");
                });

            modelBuilder.Entity("API.ML.BO.Customer", b =>
                {
                    b.Navigation("ChatbotConversations");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("API.ML.BO.Employee", b =>
                {
                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("API.ML.BO.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
