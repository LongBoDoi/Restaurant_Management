// <auto-generated />
using System;
using API.ML.BOBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250414092331_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("MySql:CharSet", "utf8mb4")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.ML.BO.Area", b =>
                {
                    b.Property<Guid>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AreaID");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.Property<Guid>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ConversationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("ChatbotConversation");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversationDetail", b =>
                {
                    b.Property<Guid>("ConversationDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConversationID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConversationDetailID");

                    b.HasIndex("ConversationID");

                    b.ToTable("ChatbotConversationDetail");
                });

            modelBuilder.Entity("API.ML.BO.CustomMenuRequest", b =>
                {
                    b.Property<Guid>("CustomMenuRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CustomMenuRequestID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomMenuRequest");
                });

            modelBuilder.Entity("API.ML.BO.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Preferences")
                        .HasColumnType("longtext");

                    b.HasKey("CustomerID");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("API.ML.BO.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Schedule")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeID = new Guid("d0929aef-1a5b-44f6-962d-01f7f9bb2b2b"),
                            EmployeeCode = "admin",
                            EmployeeName = "Admin",
                            WorkStatus = 0
                        });
                });

            modelBuilder.Entity("API.ML.BO.InventoryItem", b =>
                {
                    b.Property<Guid>("InventoryItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("InventoryItemCategoryID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("WarningStockQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InventoryItemID");

                    b.HasIndex("InventoryItemCategoryID");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("API.ML.BO.InventoryItemCategory", b =>
                {
                    b.Property<Guid>("InventoryItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InventoryItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("InventoryItemCategoryID");

                    b.ToTable("InventoryItemCategory");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.Property<Guid>("MenuItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MenuItemCategoryID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MenuItemID");

                    b.HasIndex("MenuItemCategoryID");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("API.ML.BO.MenuItemCategory", b =>
                {
                    b.Property<Guid>("MenuItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MenuItemCategoryID");

                    b.ToTable("MenuItemCategory");

                    b.HasData(
                        new
                        {
                            MenuItemCategoryID = new Guid("aa5e2d3f-4deb-4434-9ef2-19f5e51f21ad"),
                            Color = "#22C55E",
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Khai vị",
                            SortOrder = 0
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("758296ed-75e6-45c6-8a1e-b075524027af"),
                            Color = "#F59E0B",
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Món chính",
                            SortOrder = 1
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("87de53a6-68e2-46a3-b998-7df936dfa1c5"),
                            Color = "#3B82F6",
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Tráng miệng",
                            SortOrder = 2
                        },
                        new
                        {
                            MenuItemCategoryID = new Guid("78ef8d8c-a68e-40c9-99ce-5bb496faef2b"),
                            Color = "#A855F7",
                            Description = "",
                            Inactive = false,
                            MenuItemCategoryName = "Đồ uống",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("API.ML.BO.MenuItemInventoryItem", b =>
                {
                    b.Property<Guid>("MenuItemID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InventoryItemID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MenuItemID", "InventoryItemID");

                    b.HasIndex("InventoryItemID");

                    b.ToTable("MenuItemInventoryItem");
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequest")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TipAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("API.ML.BO.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MenuItemID")
                        .HasColumnType("char(36)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("MenuItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("API.ML.BO.OrderTable", b =>
                {
                    b.Property<Guid>("OrderTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TableID")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderTableID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TableID");

                    b.ToTable("OrderTable");
                });

            modelBuilder.Entity("API.ML.BO.Reservation", b =>
                {
                    b.Property<Guid>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReservationInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("API.ML.BO.ReservationTable", b =>
                {
                    b.Property<Guid>("ReservationTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ReservationID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TableID")
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationTableID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("TableID");

                    b.ToTable("ReservationTable");
                });

            modelBuilder.Entity("API.ML.BO.Setting", b =>
                {
                    b.Property<Guid>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SettingID");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("Setting");

                    b.HasData(
                        new
                        {
                            SettingID = new Guid("06005218-029d-4040-9332-62e2e5dcb597"),
                            DataType = 1,
                            SettingKey = "IntroImageUrl",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("0b10c89c-7b7c-4f98-8828-1d07dffd2f73"),
                            DataType = 1,
                            SettingKey = "RestaurantName",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("3f07e912-5330-405d-9679-1d17f9b2eff4"),
                            DataType = 1,
                            SettingKey = "RestaurantAddress",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("4e5050c5-1a3c-482f-8169-e902fcca464f"),
                            DataType = 1,
                            SettingKey = "RestaurantPhoneNumber",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("3ca30af9-1538-4339-91d5-cd90a8ef44e4"),
                            DataType = 1,
                            SettingKey = "SocialMediaUrls",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("69a4356b-1f0a-40d5-ab4d-a75a2f0e16fb"),
                            DataType = 1,
                            SettingKey = "OpeningTimes",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("401ef8c2-370c-470e-ad71-9924a85d18ff"),
                            DataType = 1,
                            SettingKey = "RestaurantSlogan",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingID = new Guid("43e2553a-5a18-4258-8c14-1852564fb309"),
                            DataType = 3,
                            SettingKey = "DisplayMenuScreenForCustomer",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingID = new Guid("5ac03c72-3e46-4f70-9b5f-3160c9ee2327"),
                            DataType = 2,
                            SettingKey = "DisplayMenuScreenForCustomerType",
                            SettingValue = "0"
                        },
                        new
                        {
                            SettingID = new Guid("b9ea5327-bbda-4f44-ba55-ccf02ed1b7ff"),
                            DataType = 2,
                            SettingKey = "DisplayMenuScreenByItemsForCustomerType",
                            SettingValue = "0"
                        },
                        new
                        {
                            SettingID = new Guid("c5bfe361-32f5-4b12-ba50-fc877e88c1f9"),
                            DataType = 1,
                            SettingKey = "ListMenuScreenForCustomerImages",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("d69a097b-f337-4521-a302-d9ed9a876a5e"),
                            DataType = 1,
                            SettingKey = "ListMenuScreenForCustomerItems",
                            SettingValue = "[]"
                        },
                        new
                        {
                            SettingID = new Guid("f10e0c45-17d3-4715-802e-30a5b5abc14c"),
                            DataType = 3,
                            SettingKey = "DisplayBookingScreenForCustomer",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingID = new Guid("6c9b5da9-56a8-40ad-8fa9-866e5f4cbd50"),
                            DataType = 1,
                            SettingKey = "MenuCategoryColors",
                            SettingValue = "[\"#EF4444\",\"#3B82F6\",\"#22C55E\",\"#F59E0B\",\"#A855F7\",\"#EC4899\",\"#6366F1\",\"#14B8A6\"]"
                        });
                });

            modelBuilder.Entity("API.ML.BO.Table", b =>
                {
                    b.Property<Guid>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AreaID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TableID");

                    b.HasIndex("AreaID");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("API.ML.BO.UserLogin", b =>
                {
                    b.Property<Guid>("UserLoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EmployeeID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserLoginID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("UserLogin");

                    b.HasData(
                        new
                        {
                            UserLoginID = new Guid("8b59dd9f-72d8-4d01-a971-03bc98c2262f"),
                            EmployeeID = new Guid("d0929aef-1a5b-44f6-962d-01f7f9bb2b2b"),
                            Password = "123456",
                            Token = "",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("CustomMenuRequestInventoryItem", b =>
                {
                    b.Property<Guid>("CustomMenuRequestsCustomMenuRequestID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InventoryItemsInventoryItemID")
                        .HasColumnType("char(36)");

                    b.HasKey("CustomMenuRequestsCustomMenuRequestID", "InventoryItemsInventoryItemID");

                    b.HasIndex("InventoryItemsInventoryItemID");

                    b.ToTable("CustomMenuRequestInventoryItem");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("ChatbotConversations")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversationDetail", b =>
                {
                    b.HasOne("API.ML.BO.ChatbotConversation", "ChatbotConversation")
                        .WithMany("ChatbotConversationDetails")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatbotConversation");
                });

            modelBuilder.Entity("API.ML.BO.CustomMenuRequest", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("CustomMenuRequests")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.InventoryItem", b =>
                {
                    b.HasOne("API.ML.BO.InventoryItemCategory", "InventoryItemCategory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryItemCategoryID");

                    b.Navigation("InventoryItemCategory");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.HasOne("API.ML.BO.MenuItemCategory", "MenuItemCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuItemCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MenuItemCategory");
                });

            modelBuilder.Entity("API.ML.BO.MenuItemInventoryItem", b =>
                {
                    b.HasOne("API.ML.BO.InventoryItem", "InventoryItem")
                        .WithMany("MenuItemInventoryItems")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.ML.BO.MenuItem", "MenuItem")
                        .WithMany("MenuItemInventoryItems")
                        .HasForeignKey("MenuItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.OrderDetail", b =>
                {
                    b.HasOne("API.ML.BO.MenuItem", "MenuItem")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuItemID");

                    b.HasOne("API.ML.BO.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.ML.BO.OrderTable", b =>
                {
                    b.HasOne("API.ML.BO.Order", "Order")
                        .WithMany("OrderTables")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.ML.BO.Table", "Table")
                        .WithMany("OrderTables")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("API.ML.BO.Reservation", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.ML.BO.ReservationTable", b =>
                {
                    b.HasOne("API.ML.BO.Reservation", "Reservation")
                        .WithMany("ReservationTables")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.ML.BO.Table", "Table")
                        .WithMany("ReservationTables")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("API.ML.BO.Table", b =>
                {
                    b.HasOne("API.ML.BO.Area", "Area")
                        .WithMany("Tables")
                        .HasForeignKey("AreaID");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("API.ML.BO.UserLogin", b =>
                {
                    b.HasOne("API.ML.BO.Customer", "Customer")
                        .WithOne("UserLogin")
                        .HasForeignKey("API.ML.BO.UserLogin", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.ML.BO.Employee", "Employee")
                        .WithOne("UserLogin")
                        .HasForeignKey("API.ML.BO.UserLogin", "EmployeeID");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CustomMenuRequestInventoryItem", b =>
                {
                    b.HasOne("API.ML.BO.CustomMenuRequest", null)
                        .WithMany()
                        .HasForeignKey("CustomMenuRequestsCustomMenuRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.ML.BO.InventoryItem", null)
                        .WithMany()
                        .HasForeignKey("InventoryItemsInventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.ML.BO.Area", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("API.ML.BO.ChatbotConversation", b =>
                {
                    b.Navigation("ChatbotConversationDetails");
                });

            modelBuilder.Entity("API.ML.BO.Customer", b =>
                {
                    b.Navigation("ChatbotConversations");

                    b.Navigation("CustomMenuRequests");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("API.ML.BO.Employee", b =>
                {
                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("API.ML.BO.InventoryItem", b =>
                {
                    b.Navigation("MenuItemInventoryItems");
                });

            modelBuilder.Entity("API.ML.BO.InventoryItemCategory", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("API.ML.BO.MenuItem", b =>
                {
                    b.Navigation("MenuItemInventoryItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("API.ML.BO.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("API.ML.BO.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderTables");
                });

            modelBuilder.Entity("API.ML.BO.Reservation", b =>
                {
                    b.Navigation("ReservationTables");
                });

            modelBuilder.Entity("API.ML.BO.Table", b =>
                {
                    b.Navigation("OrderTables");

                    b.Navigation("ReservationTables");
                });
#pragma warning restore 612, 618
        }
    }
}
